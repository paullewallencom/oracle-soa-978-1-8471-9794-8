<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Fri Jun 04 14:21:44 CEST 2010
  Author:  SOA11g
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="TravelApproval"
               targetNamespace="http://packtpub.com/bpel/travel/"
               xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
               xmlns:client="http://packtpub.com/bpel/travel/"
               xmlns:ora="http://schemas.oracle.com/xpath/extension"
               xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
               xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:ns1="http://packtpub.com/service/airline/"
         xmlns:ns2="http://packtpub.com/service/employee/"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:mhdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.mediator.service.common.functions.MediatorExtnFunction"
         xmlns:bpel2="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:med="http://schemas.oracle.com/mediator/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:bpmn="http://schemas.oracle.com/bpm/xpath"
         xmlns:socket="http://www.oracle.com/XSL/Transform/java/oracle.tip.adapter.socket.ProtocolTranslator"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns3="http://xmlns.oracle.com/bpel/workflow/taskService"
         xmlns:task="http://xmlns.oracle.com/bpel/workflow/task"
         xmlns:wfcommon="http://xmlns.oracle.com/bpel/workflow/common"
         xmlns:wf="http://schemas.oracle.com/bpel/extension/workflow"
         xmlns:ns4="http://xmlns.oracle.com/bpel/workflow/TaskEvidenceService">

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  --> 
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="client" partnerLinkType="client:travelLT" myRole="travelService" partnerRole="travelServiceCustomer"/>
    <partnerLink name="EmployeeTravelStatus"
                 partnerRole="employeeTravelStatusService"
                 partnerLinkType="ns2:employeeLT"/>
    <partnerLink myRole="airlineCustomer" name="AmericanAirlines"
                 partnerRole="airlineService" partnerLinkType="ns1:flightLT"/>
    <partnerLink myRole="airlineCustomer" name="DeltaAirlines"
                 partnerRole="airlineService" partnerLinkType="ns1:flightLT"/>
    <partnerLink myRole="TaskServiceCallbackListener"
                 name="FlightTicketApproval.TaskService"
                 partnerRole="TaskService" partnerLinkType="ns3:TaskService"/>
  </partnerLinks>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="TravelRequest" messageType="client:TravelRequestMessage"/>

    <!-- Reference to the message that will be returned to the requester-->
    <variable name="TravelResponse"
              messageType="ns1:ReservationResponseMessage"/>
   
    <variable name="EmployeeTravelStatusResponse"
              messageType="ns2:EmployeeTravelStatusResponseMessage"/>
    <variable name="FlightDetails"
              messageType="ns1:FlightTicketRequestMessage"/>
    <variable name="FlightResponseAA" messageType="ns1:TravelResponseMessage"/>
    <variable name="FlightResponseDA" messageType="ns1:TravelResponseMessage"/>
    <variable name="FlightReponseBest" messageType="ns1:TravelResponseMessage"/>
    <variable name="FlightTicketApproval_1_globalVariable"
              messageType="ns3:taskMessage"/>
  </variables>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">

    <!-- Receive input from requestor. (Note: This maps to operation defined in TravelApproval.wsdl) -->
    <receive name="receiveTravelRequest" partnerLink="client" portType="client:TravelApprovalPT" operation="TravelApproval"
             variable="TravelRequest" createInstance="yes"/>

    <!-- Generate reply to synchronous request -->
    <scope name="Scope_1">
      <bpelx:annotation>
        <bpelx:general>
          <bpelx:property name="userLabel">RetrieveEmployeeTravelStatus</bpelx:property>
        </bpelx:general>
      </bpelx:annotation>
      <variables>
         <variable name="EmployeeTravelStatusRequest"
              messageType="ns2:EmployeeTravelStatusRequestMessage"/>
      </variables>
      <sequence>
        <assign name="AssignEmployee">
          <copy>
            <from variable="TravelRequest" part="travelRequest"
                  query="/client:TravelApproval/employee"/>
            <to variable="EmployeeTravelStatusRequest" part="employee"
                query="/ns2:employee"/>
          </copy>
        </assign>
        <invoke name="EmployeeTravelStatus"
                inputVariable="EmployeeTravelStatusRequest"
                outputVariable="EmployeeTravelStatusResponse"
                partnerLink="EmployeeTravelStatus"
                portType="ns2:EmployeeTravelStatusPT"
                operation="EmployeeTravelStatus"/>
        <assign name="AssignFlightDetails">
          <copy>
            <from variable="TravelRequest" part="travelRequest"
                  query="/client:TravelApproval/flightData"/>
            <to variable="FlightDetails" part="flightTicketRequest"
                query="/ns1:flightTicketRequest/ns1:flightData"/>
          </copy>
          <copy>
            <from variable="EmployeeTravelStatusResponse" part="travelClass"
                  query="/ns2:travelClass"/>
            <to variable="FlightDetails" part="flightTicketRequest"
                query="/ns1:flightTicketRequest/ns1:travelClass"/>
          </copy>
        </assign>
      </sequence>
    </scope>
    <scope name="Scope_2">
      <bpelx:annotation>
        <bpelx:general>
          <bpelx:property name="userLabel">CheckFlightAvailability</bpelx:property>
        </bpelx:general>
      </bpelx:annotation>
      <flow>
        <sequence name="Sequence_1">
          <invoke name="DeltaAirlines" inputVariable="FlightDetails"
                  partnerLink="DeltaAirlines"
                  portType="ns1:FlightAvailabilityPT"
                  operation="FlightAvailability"/>
          <receive name="DeltaAirlines" createInstance="no"
                   variable="FlightResponseDA" partnerLink="DeltaAirlines"
                   portType="ns1:FlightCallbackPT"
                   operation="FlightTicketCallback"/>
        </sequence>
        <sequence name="Sequence_1">
          <invoke name="AmericanAirlines" inputVariable="FlightDetails"
                  partnerLink="AmericanAirlines"
                  portType="ns1:FlightAvailabilityPT"
                  operation="FlightAvailability"/>
          <receive name="AmericanAirlines" createInstance="no"
                   variable="FlightResponseAA" partnerLink="AmericanAirlines"
                   portType="ns1:FlightCallbackPT"
                   operation="FlightTicketCallback"/>
        </sequence>
      </flow>
    </scope>
    <switch name="Switch_2">
      <case condition="number(bpws:getVariableData('FlightResponseAA','confirmationData','/ns1:confirmationData/Price'))&lt;= number(bpws:getVariableData('FlightResponseDA','confirmationData','/ns1:confirmationData/Price'))">
        <bpelx:annotation>
          <bpelx:general>
            <bpelx:property name="userLabel">AA is cheaper</bpelx:property>
          </bpelx:general>
        </bpelx:annotation>
        <assign name="AssignFlightResponseAA">
          <copy>
            <from variable="FlightResponseAA"/>
            <to variable="FlightReponseBest"/>
          </copy>
        </assign>
      </case>
      <otherwise>
        <assign name="AssignFlightReponseDA">
          <copy>
            <from variable="FlightResponseDA"/>
            <to variable="FlightReponseBest"/>
          </copy>
        </assign>
      </otherwise>
    </switch>
    <scope name="FlightTicketApproval_1"
           xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
           xmlns:wf="http://schemas.oracle.com/bpel/extension/workflow"
           wf:key="FlightTicketApproval_1_globalVariable">
      <bpelx:annotation xmlns:bpelx="http://schemas.oracle.com/bpel/extension">
        <bpelx:pattern patternName="bpelx:workflow"></bpelx:pattern>
      </bpelx:annotation>
      <variables>
        <variable name="initiateTaskInput"
                  messageType="ns3:initiateTaskMessage"/>
        <variable name="initiateTaskResponseMessage"
                  messageType="ns3:initiateTaskResponseMessage"/>
      </variables>
      <sequence>
        <assign name="FlightTicketApproval_1_AssignTaskAttributes">
          <copy>
            <from expression="number(3)"/>
            <to variable="initiateTaskInput" part="payload"
                query="/ns3:initiateTask/task:task/task:priority"/>
          </copy>
          <copy>
            <from>
              <payload xmlns="http://xmlns.oracle.com/bpel/workflow/task">
                <employee xmlns="http://packtpub.com/service/employee/"/>
                <confirmationData xmlns="http://packtpub.com/service/airline/"/>
              </payload>
            </from>
            <to variable="initiateTaskInput" part="payload"
                query="/ns3:initiateTask/task:task/task:payload"/>
          </copy>
          <copy>
            <from variable="TravelRequest" part="travelRequest"
                  query="/client:TravelApproval/employee"/>
            <to variable="initiateTaskInput" part="payload"
                query="/ns3:initiateTask/task:task/task:payload/ns2:employee"/>
          </copy>
          <copy>
            <from variable="FlightReponseBest" part="confirmationData"
                  query="/ns1:confirmationData"/>
            <to variable="initiateTaskInput" part="payload"
                query="/ns3:initiateTask/task:task/task:payload/ns1:confirmationData"/>
          </copy>
        </assign>
        <invoke name="initiateTask_FlightTicketApproval_1"
                partnerLink="FlightTicketApproval.TaskService"
                portType="ns3:TaskService" operation="initiateTask"
                inputVariable="initiateTaskInput"
                outputVariable="initiateTaskResponseMessage"/>
        <receive name="receiveCompletedTask_FlightTicketApproval_1"
                 partnerLink="FlightTicketApproval.TaskService"
                 portType="ns3:TaskServiceCallback" operation="onTaskCompleted"
                 variable="FlightTicketApproval_1_globalVariable"
                 createInstance="no"/>
      </sequence>
    </scope>
    <switch name="taskSwitch">
      <case condition="bpws:getVariableData('FlightTicketApproval_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:state') = 'COMPLETED' and bpws:getVariableData('FlightTicketApproval_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'REJECT'">
        <bpelx:annotation>
          <bpelx:pattern>Task outcome is REJECT</bpelx:pattern>
          <bpelx:general>
            <bpelx:property name="userLabel">Task outcome is REJECT</bpelx:property>
          </bpelx:general>
        </bpelx:annotation>
        <sequence>
          <assign name="UpdateTravelResponse">
            <copy>
              <from expression="false()"/>
              <to variable="TravelResponse" part="reservationData"
                  query="/ns1:reservationData/Confirmed"/>
            </copy>
          </assign>
        </sequence>
      </case>
      <case condition="bpws:getVariableData('FlightTicketApproval_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:state') = 'COMPLETED' and bpws:getVariableData('FlightTicketApproval_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'APPROVE'">
        <bpelx:annotation>
          <bpelx:pattern>Task outcome is APPROVE</bpelx:pattern>
          <bpelx:general>
            <bpelx:property name="userLabel">Task outcome is APPROVE</bpelx:property>
          </bpelx:general>
        </bpelx:annotation>
        <sequence>
          <assign name="UpdateTravelResponse">
            <copy>
              <from expression="true()"/>
              <to variable="TravelResponse" part="reservationData"
                  query="/ns1:reservationData/Confirmed"/>
            </copy>
          </assign>
          <scope name="Scope_3">
            <bpelx:annotation>
              <bpelx:general>
                <bpelx:property name="userLabel">SelectAirline</bpelx:property>
              </bpelx:general>
            </bpelx:annotation>
            <switch name="Switch_1">
              <case condition="number(bpws:getVariableData('FlightResponseAA','confirmationData','/ns1:confirmationData/Price')) &lt;= number(bpws:getVariableData('FlightResponseDA','confirmationData','/ns1:confirmationData/Price'))">
                <bpelx:annotation>
                  <bpelx:general>
                    <bpelx:property name="userLabel">AA is cheaper</bpelx:property>
                  </bpelx:general>
                </bpelx:annotation>
                <sequence>
                  <invoke name="AmericanAirlinesReservation"
                          inputVariable="FlightResponseAA"
                          partnerLink="AmericanAirlines"
                          portType="ns1:FlightAvailabilityPT"
                          operation="MakeReservation"/>
                  <receive name="AmericanAirlinesReservation"
                           createInstance="no" variable="TravelResponse"
                           partnerLink="AmericanAirlines"
                           portType="ns1:FlightCallbackPT"
                           operation="MakeReservationCallback"/>
                </sequence>
              </case>
              <otherwise>
                <sequence>
                  <invoke name="DeltaAirlinesReservation"
                          inputVariable="FlightResponseDA"
                          partnerLink="DeltaAirlines"
                          portType="ns1:FlightAvailabilityPT"
                          operation="MakeReservation"/>
                  <receive name="DeltaAirlinesReservation" createInstance="no"
                           variable="TravelResponse" partnerLink="DeltaAirlines"
                           portType="ns1:FlightCallbackPT"
                           operation="MakeReservationCallback"/>
                </sequence>
              </otherwise>
            </switch>
          </scope>
        </sequence>
      </case>
      <otherwise>
        <sequence>
          <assign name="UpdateTravelResponse">
            <copy>
              <from expression="false()"/>
              <to variable="TravelResponse" part="reservationData"
                  query="/ns1:reservationData/Confirmed"/>
            </copy>
          </assign>
        </sequence>
      </otherwise>
    </switch>
    <invoke name="clientCallBack" inputVariable="TravelResponse"
            partnerLink="client" portType="client:ClientCallbackPT"
            operation="ClientCallback"/>
  </sequence>
</process>